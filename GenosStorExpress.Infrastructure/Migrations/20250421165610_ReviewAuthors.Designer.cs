// <auto-generated />
using System;
using GenosStorExpress.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GenosStorExpress.Infrastructure.Migrations
{
    [DbContext(typeof(GenosStorExpressDatabaseContext))]
    [Migration("20250421165610_ReviewAuthors")]
    partial class ReviewAuthors
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CPUCoreMotherboard", b =>
                {
                    b.Property<int>("MotherboardsId")
                        .HasColumnType("integer");

                    b.Property<int>("SupportedCPUCoresId")
                        .HasColumnType("integer");

                    b.HasKey("MotherboardsId", "SupportedCPUCoresId");

                    b.HasIndex("SupportedCPUCoresId");

                    b.ToTable("CPUCoreMotherboard", "public");
                });

            modelBuilder.Entity("CPURAMType", b =>
                {
                    b.Property<int>("CPUsId")
                        .HasColumnType("integer");

                    b.Property<long>("SupportedRamTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("CPUsId", "SupportedRamTypeId");

                    b.HasIndex("SupportedRamTypeId");

                    b.ToTable("CPURAMType", "public");
                });

            modelBuilder.Entity("ComputerCaseMotherboardFormFactor", b =>
                {
                    b.Property<int>("ComputerCasesId")
                        .HasColumnType("integer");

                    b.Property<long>("SupportedMotherboardFormFactorsId")
                        .HasColumnType("bigint");

                    b.HasKey("ComputerCasesId", "SupportedMotherboardFormFactorsId");

                    b.HasIndex("SupportedMotherboardFormFactorsId");

                    b.ToTable("ComputerCaseMotherboardFormFactor", "public");
                });

            modelBuilder.Entity("DPIModeMouse", b =>
                {
                    b.Property<int>("DPIModesId")
                        .HasColumnType("integer");

                    b.Property<int>("MousesId")
                        .HasColumnType("integer");

                    b.HasKey("DPIModesId", "MousesId");

                    b.HasIndex("MousesId");

                    b.ToTable("DPIModeMouse", "public");
                });

            modelBuilder.Entity("DiskDrivePreparedAssembly", b =>
                {
                    b.Property<int>("DisksId")
                        .HasColumnType("integer");

                    b.Property<int>("PreparedAssembliesId")
                        .HasColumnType("integer");

                    b.HasKey("DisksId", "PreparedAssembliesId");

                    b.HasIndex("PreparedAssembliesId");

                    b.ToTable("DiskDrivePreparedAssembly", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.Characteristic.CPUSocket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CPUSocket", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.Characteristic.Certificate80Plus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Certificates80Plus", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.Characteristic.ComputerCaseTypesize", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ComputerCaseTypesizes", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.Characteristic.CoolerMaterial", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CoolerMaterials", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.Characteristic.DPIMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DPI")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DPIModes", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.Characteristic.Definition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Definitions", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.Characteristic.KeyboardType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("KeyboardType", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.Characteristic.KeyboardTypesize", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("KeyboardTypesizes", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.Characteristic.MatrixType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MatrixTypes", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.Characteristic.MotherboardFormFactor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MotherboardFormFactors", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.Characteristic.PCIEVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PCIEVersions", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.Characteristic.RAMType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RAMTypes", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.Characteristic.Underlight", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Underlights", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.Characteristic.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Vendors", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.Characteristic.VesaSize", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VesaSizes", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.Characteristic.VideoPort", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VideoPorts", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActiveDiscountId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.Property<string>("ImageBase64")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ActiveDiscountId");

                    b.HasIndex("ItemTypeId");

                    b.ToTable("Items", "public");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ItemTypes", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.Property<string>("CustomerId")
                        .HasColumnType("text");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<byte>("Rating")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ItemId");

                    b.ToTable("Review", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.CPUCore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VendorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("CPUCores", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.GPU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VendorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("GPUs", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.SimpleComputerComponent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("SimpleComputerComponents", "public");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.SimpleComputerComponentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SimpleComputerComponentTypes", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Orders.ActiveDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("ActiveDiscounts", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Orders.BankCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("BankSystemId")
                        .HasColumnType("bigint");

                    b.Property<byte>("CVC")
                        .HasColumnType("smallint");

                    b.Property<string>("CustomerId")
                        .HasColumnType("text");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<byte>("ValidThruMonth")
                        .HasColumnType("smallint");

                    b.Property<byte>("ValidThruYear")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BankSystemId");

                    b.HasIndex("CustomerId");

                    b.ToTable("BankCards", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Orders.BankSystem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BankSystems", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Orders.Cart", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("text");

                    b.HasKey("CustomerId");

                    b.ToTable("Carts", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Orders.CartItem", b =>
                {
                    b.Property<string>("CartId")
                        .HasColumnType("text")
                        .HasColumnOrder(1);

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnOrder(2);

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.HasKey("CartId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("CartItems", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Orders.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OrderStatusId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("Orders", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Orders.OrderItems", b =>
                {
                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnOrder(2);

                    b.Property<double>("BoughtFor")
                        .HasColumnType("double precision")
                        .HasColumnOrder(4);

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.HasKey("OrderId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("OrderItems", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Orders.OrderStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.User.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "public");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("GraphicsCardVideoPort", b =>
                {
                    b.Property<int>("GraphicsCardsId")
                        .HasColumnType("integer");

                    b.Property<long>("VideoPortsId")
                        .HasColumnType("bigint");

                    b.HasKey("GraphicsCardsId", "VideoPortsId");

                    b.HasIndex("VideoPortsId");

                    b.ToTable("GraphicsCardVideoPort", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "public");
                });

            modelBuilder.Entity("MotherboardRAMType", b =>
                {
                    b.Property<int>("MotherboardsId")
                        .HasColumnType("integer");

                    b.Property<long>("SupportedRAMTypesId")
                        .HasColumnType("bigint");

                    b.HasKey("MotherboardsId", "SupportedRAMTypesId");

                    b.HasIndex("SupportedRAMTypesId");

                    b.ToTable("MotherboardRAMType", "public");
                });

            modelBuilder.Entity("MotherboardVideoPort", b =>
                {
                    b.Property<int>("MotherboardsId")
                        .HasColumnType("integer");

                    b.Property<long>("VideoPortsId")
                        .HasColumnType("bigint");

                    b.HasKey("MotherboardsId", "VideoPortsId");

                    b.HasIndex("VideoPortsId");

                    b.ToTable("MotherboardVideoPort", "public");
                });

            modelBuilder.Entity("PreparedAssemblyRAM", b =>
                {
                    b.Property<int>("PreparedAssembliesId")
                        .HasColumnType("integer");

                    b.Property<int>("RAMId")
                        .HasColumnType("integer");

                    b.HasKey("PreparedAssembliesId", "RAMId");

                    b.HasIndex("RAMId");

                    b.ToTable("PreparedAssemblyRAM", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.Item.Item");

                    b.Property<double>("TDP")
                        .HasColumnType("double precision");

                    b.Property<int>("VendorId")
                        .HasColumnType("integer");

                    b.HasIndex("VendorId");

                    b.ToTable("ComputerComponents", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.PreparedAssembly", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.Item.Item");

                    b.Property<int>("CPUCoolerId")
                        .HasColumnType("integer");

                    b.Property<int>("CPUId")
                        .HasColumnType("integer");

                    b.Property<int>("ComputerCaseId")
                        .HasColumnType("integer");

                    b.Property<int?>("DisplayId")
                        .HasColumnType("integer");

                    b.Property<int>("GraphicsCardId")
                        .HasColumnType("integer");

                    b.Property<int?>("KeyboardId")
                        .HasColumnType("integer");

                    b.Property<int>("MotherboardId")
                        .HasColumnType("integer");

                    b.Property<int?>("MouseId")
                        .HasColumnType("integer");

                    b.Property<int>("PowerSupplyId")
                        .HasColumnType("integer");

                    b.HasIndex("CPUCoolerId");

                    b.HasIndex("CPUId");

                    b.HasIndex("ComputerCaseId");

                    b.HasIndex("DisplayId");

                    b.HasIndex("GraphicsCardId");

                    b.HasIndex("KeyboardId");

                    b.HasIndex("MotherboardId");

                    b.HasIndex("MouseId");

                    b.HasIndex("PowerSupplyId");

                    b.ToTable("PreparedAssemblies", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.AudioChipset", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.SimpleComputerComponent");

                    b.ToTable("AudioChipsets", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.MotherboardChipset", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.SimpleComputerComponent");

                    b.ToTable("MotherboardChipsets", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.NetworkAdapter", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.SimpleComputerComponent");

                    b.ToTable("NetworkAdapters", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.SSDController", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.SimpleComputerComponent");

                    b.ToTable("SSDControllers", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.User.Administrator", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.User.User");

                    b.ToTable("Administrators", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.User.Customer", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.User.User");

                    b.Property<string>("CartId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("CartId")
                        .IsUnique();

                    b.ToTable("Customer", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.CPU", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent");

                    b.Property<float>("BaseFrequency")
                        .HasColumnType("real");

                    b.Property<int>("CoreId")
                        .HasColumnType("integer");

                    b.Property<int>("CoresCount")
                        .HasColumnType("integer");

                    b.Property<bool>("HasIntegratedGraphics")
                        .HasColumnType("boolean");

                    b.Property<float>("L2CahceSize")
                        .HasColumnType("real");

                    b.Property<float>("L3CacheSize")
                        .HasColumnType("real");

                    b.Property<long>("SocketId")
                        .HasColumnType("bigint");

                    b.Property<int>("SupportedRAMSize")
                        .HasColumnType("integer");

                    b.Property<float>("TechnicalProcess")
                        .HasColumnType("real");

                    b.Property<int>("ThreadsCount")
                        .HasColumnType("integer");

                    b.HasIndex("CoreId");

                    b.HasIndex("SocketId");

                    b.ToTable("CPUs", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.CPUCooler", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent");

                    b.Property<byte>("FanCount")
                        .HasColumnType("smallint");

                    b.Property<long>("FoundationMaterialId")
                        .HasColumnType("bigint");

                    b.Property<long>("MaxFanRPM")
                        .HasColumnType("bigint");

                    b.Property<long>("RadiatorMaterialId")
                        .HasColumnType("bigint");

                    b.Property<byte>("TubesCount")
                        .HasColumnType("smallint");

                    b.Property<float>("TubesDiameter")
                        .HasColumnType("real");

                    b.HasIndex("FoundationMaterialId");

                    b.HasIndex("RadiatorMaterialId");

                    b.ToTable("CPUCoolers", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerCase", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent");

                    b.Property<bool>("HasARGBLighting")
                        .HasColumnType("boolean");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<float>("Length")
                        .HasColumnType("real");

                    b.Property<long>("TypesizeId")
                        .HasColumnType("bigint");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasIndex("TypesizeId");

                    b.ToTable("ComputerCases", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.DiskDrive", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent");

                    b.Property<long>("Capacity")
                        .HasColumnType("bigint");

                    b.Property<long>("ReadSpeed")
                        .HasColumnType("bigint");

                    b.Property<long>("WriteSpeed")
                        .HasColumnType("bigint");

                    b.ToTable("DiskDrives", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.Display", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent");

                    b.Property<int>("DefinitionId")
                        .HasColumnType("integer");

                    b.Property<long>("MatrixTypeId")
                        .HasColumnType("bigint");

                    b.Property<int>("MaxUpdateFrequency")
                        .HasColumnType("integer");

                    b.Property<double>("ScreenDiagonal")
                        .HasColumnType("double precision");

                    b.Property<long>("UnderlightId")
                        .HasColumnType("bigint");

                    b.Property<long>("VesaSizeId")
                        .HasColumnType("bigint");

                    b.HasIndex("DefinitionId");

                    b.HasIndex("MatrixTypeId");

                    b.HasIndex("UnderlightId");

                    b.HasIndex("VesaSizeId");

                    b.ToTable("Displays", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.GraphicsCard", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent");

                    b.Property<int>("GPUId")
                        .HasColumnType("integer");

                    b.Property<byte>("MaxDisplaysSupported")
                        .HasColumnType("smallint");

                    b.Property<byte>("UsedSlots")
                        .HasColumnType("smallint");

                    b.Property<int>("VideoRAM")
                        .HasColumnType("integer");

                    b.HasIndex("GPUId");

                    b.ToTable("GraphicsCards", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.Keyboard", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent");

                    b.Property<bool>("HasRGBLighting")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWireless")
                        .HasColumnType("boolean");

                    b.Property<long>("KeyboardTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypesizeId")
                        .HasColumnType("bigint");

                    b.HasIndex("KeyboardTypeId");

                    b.HasIndex("TypesizeId");

                    b.ToTable("Keyboards", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.Motherboard", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent");

                    b.Property<long>("AudioChipsetId")
                        .HasColumnType("bigint");

                    b.Property<long>("CPUSocketId")
                        .HasColumnType("bigint");

                    b.Property<byte>("DigitalAudioPortsCount")
                        .HasColumnType("smallint");

                    b.Property<long>("FormFactorId")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasNVMeSupport")
                        .HasColumnType("boolean");

                    b.Property<byte>("M2SlotsCount")
                        .HasColumnType("smallint");

                    b.Property<int>("MaxRAMFrequency")
                        .HasColumnType("integer");

                    b.Property<long>("MotherboardChipsetId")
                        .HasColumnType("bigint");

                    b.Property<long>("NetworkAdapterId")
                        .HasColumnType("bigint");

                    b.Property<float>("NetworkAdapterSpeed")
                        .HasColumnType("real");

                    b.Property<byte>("PCIESlotsCount")
                        .HasColumnType("smallint");

                    b.Property<int>("PCIEVersionId")
                        .HasColumnType("integer");

                    b.Property<long>("PCIEVersionId1")
                        .HasColumnType("bigint");

                    b.Property<byte>("RAMChannels")
                        .HasColumnType("smallint");

                    b.Property<byte>("RAMSlots")
                        .HasColumnType("smallint");

                    b.Property<byte>("RJ45PortsCount")
                        .HasColumnType("smallint");

                    b.Property<byte>("SataPortsCount")
                        .HasColumnType("smallint");

                    b.Property<byte>("USBPortsCount")
                        .HasColumnType("smallint");

                    b.HasIndex("AudioChipsetId");

                    b.HasIndex("CPUSocketId");

                    b.HasIndex("FormFactorId");

                    b.HasIndex("MotherboardChipsetId");

                    b.HasIndex("NetworkAdapterId");

                    b.HasIndex("PCIEVersionId1");

                    b.ToTable("Motherboards", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.Mouse", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent");

                    b.Property<byte>("ButtonsCount")
                        .HasColumnType("smallint");

                    b.Property<bool>("HasProgrammableButtons")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWireless")
                        .HasColumnType("boolean");

                    b.ToTable("Mouses", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.PowerSupply", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent");

                    b.Property<long>("Certificate80PlusId")
                        .HasColumnType("bigint");

                    b.Property<byte>("MolexPorts")
                        .HasColumnType("smallint");

                    b.Property<int>("PowerOutput")
                        .HasColumnType("integer");

                    b.Property<byte>("SataPorts")
                        .HasColumnType("smallint");

                    b.HasIndex("Certificate80PlusId");

                    b.ToTable("PowerSupplies", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.RAM", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent");

                    b.Property<byte>("CL")
                        .HasColumnType("smallint");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<int>("ModuleSize")
                        .HasColumnType("integer");

                    b.Property<byte>("ModulesCount")
                        .HasColumnType("smallint");

                    b.Property<int>("TotalSize")
                        .HasColumnType("integer");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<byte>("tRAS")
                        .HasColumnType("smallint");

                    b.Property<byte>("tRCD")
                        .HasColumnType("smallint");

                    b.Property<byte>("tRP")
                        .HasColumnType("smallint");

                    b.HasIndex("TypeId");

                    b.ToTable("RAMs", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.User.IndividualEntity", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.User.Customer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.ToTable("IndividualEntities", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.User.LegalEntity", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.User.Customer");

                    b.Property<long>("INN")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<long>("KPP")
                        .HasColumnType("bigint");

                    b.Property<string>("LegalAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PhysicalAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.ToTable("LegalEntities", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.HDD", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.Item.ComputerComponent.DiskDrive");

                    b.Property<int>("RPM")
                        .HasColumnType("integer");

                    b.ToTable("HDDs", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.SSD", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.Item.ComputerComponent.DiskDrive");

                    b.Property<byte>("BitsForCell")
                        .HasColumnType("smallint");

                    b.Property<long>("ControllerId")
                        .HasColumnType("bigint");

                    b.Property<float>("DWPD")
                        .HasColumnType("real");

                    b.Property<int>("TBW")
                        .HasColumnType("integer");

                    b.HasIndex("ControllerId");

                    b.ToTable("SSDs", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.NVMeSSD", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.Item.ComputerComponent.SSD");

                    b.ToTable("NVMeSSDs", "public");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.SataSSD", b =>
                {
                    b.HasBaseType("GenosStorExpress.Domain.Entity.Item.ComputerComponent.SSD");

                    b.ToTable("SataSSDs", "public");
                });

            modelBuilder.Entity("CPUCoreMotherboard", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.Motherboard", null)
                        .WithMany()
                        .HasForeignKey("MotherboardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.CPUCore", null)
                        .WithMany()
                        .HasForeignKey("SupportedCPUCoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CPURAMType", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.CPU", null)
                        .WithMany()
                        .HasForeignKey("CPUsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Characteristic.RAMType", null)
                        .WithMany()
                        .HasForeignKey("SupportedRamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComputerCaseMotherboardFormFactor", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerCase", null)
                        .WithMany()
                        .HasForeignKey("ComputerCasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Characteristic.MotherboardFormFactor", null)
                        .WithMany()
                        .HasForeignKey("SupportedMotherboardFormFactorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DPIModeMouse", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Characteristic.DPIMode", null)
                        .WithMany()
                        .HasForeignKey("DPIModesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.Mouse", null)
                        .WithMany()
                        .HasForeignKey("MousesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiskDrivePreparedAssembly", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.DiskDrive", null)
                        .WithMany()
                        .HasForeignKey("DisksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.PreparedAssembly", null)
                        .WithMany()
                        .HasForeignKey("PreparedAssembliesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.Item", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Orders.ActiveDiscount", "ActiveDiscount")
                        .WithMany()
                        .HasForeignKey("ActiveDiscountId");

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveDiscount");

                    b.Navigation("ItemType");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.Review", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.User.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId");

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Item", "Item")
                        .WithMany("Reviews")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.CPUCore", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Characteristic.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.GPU", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Characteristic.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.SimpleComputerComponent", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.SimpleComputerComponentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Orders.BankCard", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Orders.BankSystem", "BankSystem")
                        .WithMany()
                        .HasForeignKey("BankSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.User.Customer", null)
                        .WithMany("BankCards")
                        .HasForeignKey("CustomerId");

                    b.Navigation("BankSystem");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Orders.CartItem", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Orders.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Item", "Item")
                        .WithMany("Carts")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Orders.Order", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.User.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Orders.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Orders.OrderItems", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Orders.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GraphicsCardVideoPort", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.GraphicsCard", null)
                        .WithMany()
                        .HasForeignKey("GraphicsCardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Characteristic.VideoPort", null)
                        .WithMany()
                        .HasForeignKey("VideoPortsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MotherboardRAMType", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.Motherboard", null)
                        .WithMany()
                        .HasForeignKey("MotherboardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Characteristic.RAMType", null)
                        .WithMany()
                        .HasForeignKey("SupportedRAMTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MotherboardVideoPort", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.Motherboard", null)
                        .WithMany()
                        .HasForeignKey("MotherboardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Characteristic.VideoPort", null)
                        .WithMany()
                        .HasForeignKey("VideoPortsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PreparedAssemblyRAM", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.PreparedAssembly", null)
                        .WithMany()
                        .HasForeignKey("PreparedAssembliesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.RAM", null)
                        .WithMany()
                        .HasForeignKey("RAMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Item", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Characteristic.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.PreparedAssembly", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.CPUCooler", "CPUCooler")
                        .WithMany()
                        .HasForeignKey("CPUCoolerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.CPU", "CPU")
                        .WithMany()
                        .HasForeignKey("CPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerCase", "ComputerCase")
                        .WithMany()
                        .HasForeignKey("ComputerCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.Display", "Display")
                        .WithMany()
                        .HasForeignKey("DisplayId");

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.GraphicsCard", "GraphicsCard")
                        .WithMany()
                        .HasForeignKey("GraphicsCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Item", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.Item.PreparedAssembly", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.Keyboard", "Keyboard")
                        .WithMany()
                        .HasForeignKey("KeyboardId");

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.Motherboard", "Motherboard")
                        .WithMany()
                        .HasForeignKey("MotherboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.Mouse", "Mouse")
                        .WithMany()
                        .HasForeignKey("MouseId");

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.PowerSupply", "PowerSupply")
                        .WithMany()
                        .HasForeignKey("PowerSupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CPU");

                    b.Navigation("CPUCooler");

                    b.Navigation("ComputerCase");

                    b.Navigation("Display");

                    b.Navigation("GraphicsCard");

                    b.Navigation("Keyboard");

                    b.Navigation("Motherboard");

                    b.Navigation("Mouse");

                    b.Navigation("PowerSupply");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.AudioChipset", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.SimpleComputerComponent", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.AudioChipset", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.MotherboardChipset", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.SimpleComputerComponent", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.MotherboardChipset", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.NetworkAdapter", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.SimpleComputerComponent", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.NetworkAdapter", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.SSDController", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.SimpleComputerComponent", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.SSDController", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.User.Administrator", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.User.User", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.User.Administrator", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.User.Customer", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Orders.Cart", "Cart")
                        .WithOne("Customer")
                        .HasForeignKey("GenosStorExpress.Domain.Entity.User.Customer", "CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.User.User", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.User.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.CPU", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.CPUCore", "Core")
                        .WithMany()
                        .HasForeignKey("CoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.Item.ComputerComponent.CPU", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Characteristic.CPUSocket", "Socket")
                        .WithMany()
                        .HasForeignKey("SocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Core");

                    b.Navigation("Socket");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.CPUCooler", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Characteristic.CoolerMaterial", "FoundationMaterial")
                        .WithMany()
                        .HasForeignKey("FoundationMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.Item.ComputerComponent.CPUCooler", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Characteristic.CoolerMaterial", "RadiatorMaterial")
                        .WithMany()
                        .HasForeignKey("RadiatorMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoundationMaterial");

                    b.Navigation("RadiatorMaterial");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerCase", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerCase", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Characteristic.ComputerCaseTypesize", "Typesize")
                        .WithMany()
                        .HasForeignKey("TypesizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Typesize");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.DiskDrive", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.Item.ComputerComponent.DiskDrive", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.Display", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Characteristic.Definition", "Definition")
                        .WithMany()
                        .HasForeignKey("DefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.Item.ComputerComponent.Display", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Characteristic.MatrixType", "MatrixType")
                        .WithMany()
                        .HasForeignKey("MatrixTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Characteristic.Underlight", "Underlight")
                        .WithMany()
                        .HasForeignKey("UnderlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Characteristic.VesaSize", "VesaSize")
                        .WithMany()
                        .HasForeignKey("VesaSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Definition");

                    b.Navigation("MatrixType");

                    b.Navigation("Underlight");

                    b.Navigation("VesaSize");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.GraphicsCard", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.GPU", "GPU")
                        .WithMany()
                        .HasForeignKey("GPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.Item.ComputerComponent.GraphicsCard", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GPU");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.Keyboard", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.Item.ComputerComponent.Keyboard", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Characteristic.KeyboardType", "KeyboardType")
                        .WithMany()
                        .HasForeignKey("KeyboardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Characteristic.KeyboardTypesize", "Typesize")
                        .WithMany()
                        .HasForeignKey("TypesizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KeyboardType");

                    b.Navigation("Typesize");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.Motherboard", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.AudioChipset", "AudioChipset")
                        .WithMany()
                        .HasForeignKey("AudioChipsetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Characteristic.CPUSocket", "CPUSocket")
                        .WithMany()
                        .HasForeignKey("CPUSocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Characteristic.MotherboardFormFactor", "FormFactor")
                        .WithMany()
                        .HasForeignKey("FormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.Item.ComputerComponent.Motherboard", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.MotherboardChipset", "MotherboardChipset")
                        .WithMany()
                        .HasForeignKey("MotherboardChipsetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.NetworkAdapter", "NetworkAdapter")
                        .WithMany()
                        .HasForeignKey("NetworkAdapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Characteristic.PCIEVersion", "PCIEVersion")
                        .WithMany()
                        .HasForeignKey("PCIEVersionId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AudioChipset");

                    b.Navigation("CPUSocket");

                    b.Navigation("FormFactor");

                    b.Navigation("MotherboardChipset");

                    b.Navigation("NetworkAdapter");

                    b.Navigation("PCIEVersion");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.Mouse", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.Item.ComputerComponent.Mouse", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.PowerSupply", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Characteristic.Certificate80Plus", "Certificate80Plus")
                        .WithMany()
                        .HasForeignKey("Certificate80PlusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.Item.ComputerComponent.PowerSupply", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate80Plus");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.RAM", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.ComputerComponent", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.Item.ComputerComponent.RAM", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.Characteristic.RAMType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.User.IndividualEntity", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.User.Customer", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.User.IndividualEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.User.LegalEntity", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.User.Customer", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.User.LegalEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.HDD", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.DiskDrive", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.Item.ComputerComponent.HDD", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.SSD", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.SimpleComputerComponent.SSDController", "Controller")
                        .WithMany()
                        .HasForeignKey("ControllerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.DiskDrive", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.Item.ComputerComponent.SSD", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Controller");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.NVMeSSD", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.SSD", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.Item.ComputerComponent.NVMeSSD", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.ComputerComponent.SataSSD", b =>
                {
                    b.HasOne("GenosStorExpress.Domain.Entity.Item.ComputerComponent.SSD", null)
                        .WithOne()
                        .HasForeignKey("GenosStorExpress.Domain.Entity.Item.ComputerComponent.SataSSD", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Item.Item", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Orders.Cart", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Items");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.Orders.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("GenosStorExpress.Domain.Entity.User.Customer", b =>
                {
                    b.Navigation("BankCards");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
